TIME2DO API Documentation

Notes:
    @ = Adresse du backend. Par défaut http://127.0.0.1:8000 quand hébergé sur votre pc.
    <x> = variable de la page frontend (name is not important)
    ¤ = nécessite d'être envoyé avec le token d'authentification

Routes:

    Authentification:

        Register :
            POST @/api/auth/register/
            {
                "name": <string>,
                "email": <string>,
                "password": <string>
            }

            OUTPUT:
            {
                {
                    "status": true,
                    "message": "User Created Successfully",
                    "token": <string> => A garder pour les requêtes suivantes
                }
            }

        Login :
            POST @/api/auth/login/
            {
                "email": <string>,
                "password": <string>
            }

            OUTPUT:
            {
                "status": true,
                "message": "User logged in successfully",
                "token": <string> => A garder pour les requêtes suivantes
            }

        Logout (¤) :
            GET @/api/auth/logout/

        Get User Info (¤) :
            GET @/api/auth/user/

    Events:

        Get All Events (¤) :
            GET @/api/events/

        Get Event (¤) :
            GET @/api/events/<id>

        Create Event (¤) :
            POST @/api/events/
            {
                "name_event": <string>,
                "description": <string>,
                "start_date": <string (format: YYYY-MM-DD HH:mm:SS) >,
                "length": <string (in minutes)>,
                "movable": <bool>,
                "priority_level": <string ?>
                "id_calendar": <string, id of the calendar to which you add the event>,
            }

        Update Event (¤) :
            PATCH @/api/events/<id>
            {
                "name_event": <string>,
                "description": <string>,
                "start_date": <string (format: YYYY-MM-DD HH:mm:SS) >,
                "length": <string (in minutes)>,
                "movable": <bool>,
                "priority_level": <string ?>
                "id_calendar": <string, id of the calendar to which you add the event>,
            }

        Delete Event (¤) :
            DELETE @/api/events/<id>

    Calendars:
        Get All Calendars (¤):
            GET @/api/calendars/

        Get Calendar (¤):
            GET @/api/calendars/<id>

        Create Calendar (¤) :
            POST @/api/calendars/
            {
                "name_calendar": <string>,
                "to_notify": <bool>
            }

        Update Calendar (¤) :
            PATCH @/api/calendars/<id>
            {
                "name_calendar": <string>,
                "to_notify": <bool>
            }

        Delete Calendar (¤) :
            DELETE @/api/calendars/<id>

    Task:

        Get All Tasks (¤) :
            GET @/api/tasks/

        Get Task (¤) :
            GET @/api/tasks/<id>

        Create Task (¤) :
            POST @/api/tasks/
            {
                "name_task": <string>,
                "date_day": <string (format: YYYY-MM-DD)>,
                "description": <string>,
                "id_todo": <string, id of the calendar to which you add the event>
            }

        Update Task (¤) :
            PATCH @/api/tasks/<id>
            {
                "name_task": <string>,
                "date_day": <string (format: YYYY-MM-DD)>,
                "description": <string>,
                "id_todo": <string, id of the calendar to which you add the event>
            }

        Delete Task (¤) :
            DELETE @/api/tasks/<id>

    todolist

        Get All todolist (¤) :
            GET @/api/todolist/

        Get todolist (¤) :
            GET @/api/todolist/<id>

        Create todolist (¤) :
            POST @/api/todolist/
            {
                "name_todo": <string>,
            }

        Update todolist (¤) :
            PATCH @/api/todolist/<id>
            {
                "name_todo": <string>,
            }

        Delete todolist (¤) :
            DELETE @/api/todolist/<id>

    time preferences:

        Get All time preferences (¤) :
            GET @/api/timepreferences/

        Get a time preference by name (¤) :
            GET @/api/timepreferences/<name>

        Create time preferences (¤) :
            POST @/api/timepreferences/
            {
                "name_timepref": <string>,
                "start_time": <string (format: HH:mm:SS )>,
                "length": <string (in minutes)>
            }

        Update time preferences (¤) :
            PATCH @/api/timepreferences/<name_timepref>
            {
                "name_timepref": <string>,
                "start_time": <string (format: HH:mm:SS )>,
                "length": <string (in minutes)>
            }
